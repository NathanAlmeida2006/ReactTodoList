{"ast":null,"code":"var _jsxFileName = \"/home/poetaalucard/Documentos/Projetos/Front/Atividade/ReactAtividade/src/context/TaskContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport { api } from \"../services/api\";\n\n// Cria um contexto para compartilhar dados entre componentes\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskContext = /*#__PURE__*/createContext();\nexport function TaskProvider({\n  children\n}) {\n  _s();\n  // Estado para armazenar a lista de tarefas\n  const [tasks, setTasks] = useState([]);\n\n  // Estado para armazenar - all, active, completed\n  const [filter, setFilter] = useState(\"all\");\n\n  // Efeito que carrega as tarefas ao montar o componente\n  useEffect(() => {\n    loadTasks();\n  }, []);\n\n  // Função para carregar as tarefas da API\n  const loadTasks = async () => {\n    try {\n      const response = await api.get(\"/todos\"); // Faz uma requisição GET para a API\n      setTasks(response.data); // Atualiza o estado com as tarefas recebidas\n    } catch (error) {\n      console.error(\"Erro ao carregar tarefas:\", error); // Trata erros\n    }\n  };\n\n  // Função para adicionar uma nova tarefa\n  const addTask = async task => {\n    try {\n      const response = await api.post(\"/todos\", task); // Faz uma requisição POST para a API\n      setTasks([...tasks, response.data]); // Adiciona a nova tarefa ao estado\n    } catch (error) {\n      console.error(\"Erro ao adicionar tarefa:\", error); // Trata erros\n    }\n  };\n\n  // Função para editar uma tarefa existente\n  const editTask = async (id, updatedTask) => {\n    try {\n      await api.put(`/todos/${id}`, updatedTask); // Faz uma requisição PUT para a API\n      setTasks(tasks.map(task => task.id === id ? {\n        ...task,\n        ...updatedTask\n      } : task // Atualiza a tarefa no estado\n      ));\n    } catch (error) {\n      console.error(\"Erro ao editar tarefa:\", error); // Trata erros\n    }\n  };\n\n  // Função para excluir uma tarefa\n  const deleteTask = async id => {\n    try {\n      await api.delete(`/todos/${id}`); // Faz uma requisição DELETE para a API\n      setTasks(tasks.filter(task => task.id !== id)); // Remove a tarefa do estado\n    } catch (error) {\n      console.error(\"Erro ao excluir tarefa:\", error); // Trata erros\n    }\n  };\n\n  // Função para alternar o status de conclusão de uma tarefa\n  const toggleComplete = async id => {\n    try {\n      const task = tasks.find(task => task.id === id); // Encontra a tarefa pelo ID\n      await api.patch(`/todos/${id}`, {\n        completed: !task.completed\n      }); // Faz uma requisição PATCH para a API\n      setTasks(tasks.map(task => task.id === id ? {\n        ...task,\n        completed: !task.completed\n      } : task // Atualiza o status da tarefa no estado\n      ));\n    } catch (error) {\n      console.error(\"Erro ao atualizar status:\", error); // Trata erros\n    }\n  };\n\n  // Retorna o Provider do contexto com os valores compartilhados\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      tasks,\n      // Lista de tarefas\n      filter,\n      // Filtro atual\n      setFilter,\n      // Função para alterar o filtro\n      addTask,\n      // Função para adicionar tarefa\n      editTask,\n      // Função para editar tarefa\n      deleteTask,\n      // Função para excluir tarefa\n      toggleComplete // Função para alternar status de conclusão\n    },\n    children: [children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n// Hook personalizado para acessar o contexto de tarefas\n_s(TaskProvider, \"o1KEptFMo/wdRsF8m2uTuexOHmY=\");\n_c = TaskProvider;\nexport const useTasks = () => {\n  _s2();\n  return useContext(TaskContext);\n};\n_s2(useTasks, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"TaskProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","api","jsxDEV","_jsxDEV","TaskContext","TaskProvider","children","_s","tasks","setTasks","filter","setFilter","loadTasks","response","get","data","error","console","addTask","task","post","editTask","id","updatedTask","put","map","deleteTask","delete","toggleComplete","find","patch","completed","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTasks","_s2","$RefreshReg$"],"sources":["/home/poetaalucard/Documentos/Projetos/Front/Atividade/ReactAtividade/src/context/TaskContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from \"react\";\r\nimport { api } from \"../services/api\";\r\n\r\n// Cria um contexto para compartilhar dados entre componentes\r\nconst TaskContext = createContext();\r\n\r\nexport function TaskProvider({ children }) {\r\n  // Estado para armazenar a lista de tarefas\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  // Estado para armazenar - all, active, completed\r\n  const [filter, setFilter] = useState(\"all\");\r\n\r\n  // Efeito que carrega as tarefas ao montar o componente\r\n  useEffect(() => {\r\n    loadTasks();\r\n  }, []);\r\n\r\n  // Função para carregar as tarefas da API\r\n  const loadTasks = async () => {\r\n    try {\r\n      const response = await api.get(\"/todos\"); // Faz uma requisição GET para a API\r\n      setTasks(response.data); // Atualiza o estado com as tarefas recebidas\r\n    } catch (error) {\r\n      console.error(\"Erro ao carregar tarefas:\", error); // Trata erros\r\n    }\r\n  };\r\n\r\n  // Função para adicionar uma nova tarefa\r\n  const addTask = async (task) => {\r\n    try {\r\n      const response = await api.post(\"/todos\", task); // Faz uma requisição POST para a API\r\n      setTasks([...tasks, response.data]); // Adiciona a nova tarefa ao estado\r\n    } catch (error) {\r\n      console.error(\"Erro ao adicionar tarefa:\", error); // Trata erros\r\n    }\r\n  };\r\n\r\n  // Função para editar uma tarefa existente\r\n  const editTask = async (id, updatedTask) => {\r\n    try {\r\n      await api.put(`/todos/${id}`, updatedTask); // Faz uma requisição PUT para a API\r\n      setTasks(\r\n        tasks.map(\r\n          (task) => (task.id === id ? { ...task, ...updatedTask } : task) // Atualiza a tarefa no estado\r\n        )\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Erro ao editar tarefa:\", error); // Trata erros\r\n    }\r\n  };\r\n\r\n  // Função para excluir uma tarefa\r\n  const deleteTask = async (id) => {\r\n    try {\r\n      await api.delete(`/todos/${id}`); // Faz uma requisição DELETE para a API\r\n      setTasks(tasks.filter((task) => task.id !== id)); // Remove a tarefa do estado\r\n    } catch (error) {\r\n      console.error(\"Erro ao excluir tarefa:\", error); // Trata erros\r\n    }\r\n  };\r\n\r\n  // Função para alternar o status de conclusão de uma tarefa\r\n  const toggleComplete = async (id) => {\r\n    try {\r\n      const task = tasks.find((task) => task.id === id); // Encontra a tarefa pelo ID\r\n      await api.patch(`/todos/${id}`, { completed: !task.completed }); // Faz uma requisição PATCH para a API\r\n      setTasks(\r\n        tasks.map(\r\n          (task) =>\r\n            task.id === id ? { ...task, completed: !task.completed } : task // Atualiza o status da tarefa no estado\r\n        )\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Erro ao atualizar status:\", error); // Trata erros\r\n    }\r\n  };\r\n\r\n  // Retorna o Provider do contexto com os valores compartilhados\r\n  return (\r\n    <TaskContext.Provider\r\n      value={{\r\n        tasks, // Lista de tarefas\r\n        filter, // Filtro atual\r\n        setFilter, // Função para alterar o filtro\r\n        addTask, // Função para adicionar tarefa\r\n        editTask, // Função para editar tarefa\r\n        deleteTask, // Função para excluir tarefa\r\n        toggleComplete, // Função para alternar status de conclusão\r\n      }}\r\n    >\r\n      {children} {/* Renderiza os componentes filhos */}\r\n    </TaskContext.Provider>\r\n  );\r\n}\r\n\r\n// Hook personalizado para acessar o contexto de tarefas\r\nexport const useTasks = () => useContext(TaskContext);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}