{"ast":null,"code":"var _jsxFileName = \"/home/poetaalucard/Documentos/Projetos/Front/Atividade/ReactAtividade/src/components/TaskForm.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useTasks } from \"../context/TaskContext\";\nimport \"../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TaskForm({\n  editTask\n}) {\n  _s();\n  // Cria um estado local para armazenar o texto da tarefa\n  const [text, setText] = useState(\"\");\n\n  // Extrai a função addTask do contexto global\n  const {\n    addTask\n  } = useTasks();\n\n  // Função que lida com o envio do formulário\n  const handleSubmit = e => {\n    e.preventDefault(); // Previne o comportamento padrão do formulário\n    if (!text.trim()) return; // Se o texto estiver vazio, não faz nada\n    addTask({\n      title: text,\n      completed: false\n    }); // Adiciona a nova tarefa\n    setText(\"\"); // Limpa o campo de texto após adicionar a tarefa\n  };\n\n  // Retorna o JSX do formulário\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"task-form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"form-input\",\n      value: text // Valor do input controlado pelo estado\n      ,\n      onChange: e => setText(e.target.value) // Atualiza o estado ao digitar\n      ,\n      placeholder: \"Adicionar nova tarefa...\" // Texto de placeholder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"form-button\",\n      children: editTask ? \"Salvar\" : \"Adicionar Tarefa\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskForm, \"7ceqRwLPf9H8W7nC3WWdDwa5F6w=\", false, function () {\n  return [useTasks];\n});\n_c = TaskForm;\nvar _c;\n$RefreshReg$(_c, \"TaskForm\");","map":{"version":3,"names":["useState","useTasks","jsxDEV","_jsxDEV","TaskForm","editTask","_s","text","setText","addTask","handleSubmit","e","preventDefault","trim","title","completed","className","onSubmit","children","type","value","onChange","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/poetaalucard/Documentos/Projetos/Front/Atividade/ReactAtividade/src/components/TaskForm.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { useTasks } from \"../context/TaskContext\";\r\nimport \"../App.css\";\r\n\r\nexport default function TaskForm({ editTask }) {\r\n  // Cria um estado local para armazenar o texto da tarefa\r\n  const [text, setText] = useState(\"\");\r\n\r\n  // Extrai a função addTask do contexto global\r\n  const { addTask } = useTasks();\r\n\r\n  // Função que lida com o envio do formulário\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault(); // Previne o comportamento padrão do formulário\r\n    if (!text.trim()) return; // Se o texto estiver vazio, não faz nada\r\n    addTask({ title: text, completed: false }); // Adiciona a nova tarefa\r\n    setText(\"\"); // Limpa o campo de texto após adicionar a tarefa\r\n  };\r\n\r\n  // Retorna o JSX do formulário\r\n  return (\r\n    <form className=\"task-form\" onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        className=\"form-input\"\r\n        value={text} // Valor do input controlado pelo estado\r\n        onChange={(e) => setText(e.target.value)} // Atualiza o estado ao digitar\r\n        placeholder=\"Adicionar nova tarefa...\" // Texto de placeholder\r\n      />\r\n      <button type=\"submit\" className=\"form-button\">\r\n        {/* Renderiza o texto do botão condicionalmente */}\r\n        {editTask ? \"Salvar\" : \"Adicionar Tarefa\"}\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,QAAQ,QAAQ,wBAAwB;AACjD,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,eAAe,SAASC,QAAQA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAC7C;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACA,MAAM;IAAES;EAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC;;EAE9B;EACA,MAAMS,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,CAAC,CAAC,CAAC,CAAC;IACpB,IAAI,CAACL,IAAI,CAACM,IAAI,CAAC,CAAC,EAAE,OAAO,CAAC;IAC1BJ,OAAO,CAAC;MAAEK,KAAK,EAAEP,IAAI;MAAEQ,SAAS,EAAE;IAAM,CAAC,CAAC,CAAC,CAAC;IAC5CP,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;EACf,CAAC;;EAED;EACA,oBACEL,OAAA;IAAMa,SAAS,EAAC,WAAW;IAACC,QAAQ,EAAEP,YAAa;IAAAQ,QAAA,gBACjDf,OAAA;MACEgB,IAAI,EAAC,MAAM;MACXH,SAAS,EAAC,YAAY;MACtBI,KAAK,EAAEb,IAAK,CAAC;MAAA;MACbc,QAAQ,EAAGV,CAAC,IAAKH,OAAO,CAACG,CAAC,CAACW,MAAM,CAACF,KAAK,CAAE,CAAC;MAAA;MAC1CG,WAAW,EAAC,0BAA0B,CAAC;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC,eACFxB,OAAA;MAAQgB,IAAI,EAAC,QAAQ;MAACH,SAAS,EAAC,aAAa;MAAAE,QAAA,EAE1Cb,QAAQ,GAAG,QAAQ,GAAG;IAAkB;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEX;AAACrB,EAAA,CA/BuBF,QAAQ;EAAA,QAKVH,QAAQ;AAAA;AAAA2B,EAAA,GALNxB,QAAQ;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}