{"ast":null,"code":"var _jsxFileName = \"/home/poetaalucard/Documentos/Projetos/Front/Atividade/ReactAtividade/src/components/TaskItem.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useTasks } from \"../context/TaskContext\";\nimport { Link } from \"react-router-dom\";\nimport { Save, Edit2, Trash2 } from \"lucide-react\";\nimport \"../App.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TaskItem({\n  task\n}) {\n  _s();\n  // Extrai as funções toggleComplete, deleteTask e editTask do contexto global\n  const {\n    toggleComplete,\n    deleteTask,\n    editTask\n  } = useTasks();\n\n  // Estado local para controlar se a tarefa está em modo de edição\n  const [isEditing, setIsEditing] = useState(false);\n\n  // Estado local para armazenar o texto editado da tarefa\n  const [editedText, setEditedText] = useState(task.title);\n\n  // Novo estado para armazenar a observação editada\n  const [editedObservation, setEditedObservation] = useState(task.observation || \"\");\n\n  // Função que lida com a edição da tarefa\n  const handleEdit = async () => {\n    if (isEditing) {\n      // Se estiver em modo de edição, salva as alterações na API (incluindo observação)\n      await editTask(task.id, {\n        title: editedText,\n        observation: editedObservation\n      });\n    }\n    // Alterna entre os modos de edição e visualização\n    setIsEditing(!isEditing);\n  };\n\n  // Retorna o JSX do item da tarefa\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `task-item ${task.completed ? \"completed\" : \"\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      className: \"task-checkbox\",\n      checked: task.completed,\n      onChange: () => toggleComplete(task.id) // Alterna o status da tarefa\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), isEditing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form-input\",\n        value: editedText,\n        onChange: e => setEditedText(e.target.value) // Atualiza o texto editado\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `observation-${task.id}`,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: `observation-${task.id}`,\n            className: \"form-input\",\n            value: editedObservation,\n            onChange: e => setEditedObservation(e.target.value) // Atualiza a observação editada\n            ,\n            placeholder: \"Descri\\xE7\\xE3o\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) :\n    /*#__PURE__*/\n    // Link para a página de detalhes da tarefa\n    _jsxDEV(Link, {\n      to: `/task/${task.id}`,\n      className: \"task-title\",\n      children: task.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"icon-button\",\n        onClick: handleEdit,\n        children: isEditing ? /*#__PURE__*/_jsxDEV(Save, {\n          size: 18,\n          strokeWidth: 2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this) // Ícone de salvar no modo de edição\n        : /*#__PURE__*/_jsxDEV(Edit2, {\n          size: 18,\n          strokeWidth: 2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this) // Ícone de edição no modo de visualização\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"icon-button\",\n        onClick: () => deleteTask(task.id),\n        children: [/*#__PURE__*/_jsxDEV(Trash2, {\n          size: 18,\n          strokeWidth: 2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskItem, \"5V8Nq/JS5th8viavc1Cy5IQj4Ms=\", false, function () {\n  return [useTasks];\n});\n_c = TaskItem;\nvar _c;\n$RefreshReg$(_c, \"TaskItem\");","map":{"version":3,"names":["useState","useTasks","Link","Save","Edit2","Trash2","jsxDEV","_jsxDEV","Fragment","_Fragment","TaskItem","task","_s","toggleComplete","deleteTask","editTask","isEditing","setIsEditing","editedText","setEditedText","title","editedObservation","setEditedObservation","observation","handleEdit","id","className","completed","children","type","checked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","value","e","target","htmlFor","placeholder","to","onClick","size","strokeWidth","_c","$RefreshReg$"],"sources":["/home/poetaalucard/Documentos/Projetos/Front/Atividade/ReactAtividade/src/components/TaskItem.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { useTasks } from \"../context/TaskContext\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Save, Edit2, Trash2 } from \"lucide-react\";\r\nimport \"../App.css\";\r\n\r\nexport default function TaskItem({ task }) {\r\n  // Extrai as funções toggleComplete, deleteTask e editTask do contexto global\r\n  const { toggleComplete, deleteTask, editTask } = useTasks();\r\n\r\n  // Estado local para controlar se a tarefa está em modo de edição\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  // Estado local para armazenar o texto editado da tarefa\r\n  const [editedText, setEditedText] = useState(task.title);\r\n\r\n  // Novo estado para armazenar a observação editada\r\n  const [editedObservation, setEditedObservation] = useState(\r\n    task.observation || \"\"\r\n  );\r\n\r\n  // Função que lida com a edição da tarefa\r\n  const handleEdit = async () => {\r\n    if (isEditing) {\r\n      // Se estiver em modo de edição, salva as alterações na API (incluindo observação)\r\n      await editTask(task.id, {\r\n        title: editedText,\r\n        observation: editedObservation,\r\n      });\r\n    }\r\n    // Alterna entre os modos de edição e visualização\r\n    setIsEditing(!isEditing);\r\n  };\r\n\r\n  // Retorna o JSX do item da tarefa\r\n  return (\r\n    <div className={`task-item ${task.completed ? \"completed\" : \"\"}`}>\r\n      {/* Checkbox para marcar a tarefa como concluída ou pendente */}\r\n      <input\r\n        type=\"checkbox\"\r\n        className=\"task-checkbox\"\r\n        checked={task.completed}\r\n        onChange={() => toggleComplete(task.id)} // Alterna o status da tarefa\r\n      />\r\n\r\n      {/* Renderização condicional: modo de edição ou visualização */}\r\n      {isEditing ? (\r\n        <>\r\n          {/* Campo de texto para editar o título da tarefa */}\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-input\"\r\n            value={editedText}\r\n            onChange={(e) => setEditedText(e.target.value)} // Atualiza o texto editado\r\n          />\r\n          {/* Campo extra para a observação */}\r\n          <div>\r\n            <label htmlFor={`observation-${task.id}`}>\r\n              <input\r\n                type=\"text\"\r\n                id={`observation-${task.id}`}\r\n                className=\"form-input\"\r\n                value={editedObservation}\r\n                onChange={(e) => setEditedObservation(e.target.value)} // Atualiza a observação editada\r\n                placeholder=\"Descrição\"\r\n              />\r\n            </label>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        // Link para a página de detalhes da tarefa\r\n        <Link to={`/task/${task.id}`} className=\"task-title\">\r\n          {task.title}\r\n        </Link>\r\n      )}\r\n\r\n      {/* Container para os botões de ação */}\r\n      <div className=\"task-actions\">\r\n        {/* Botão para editar/salvar a tarefa */}\r\n        <button className=\"icon-button\" onClick={handleEdit}>\r\n          {isEditing ? (\r\n            <Save size={18} strokeWidth={2} /> // Ícone de salvar no modo de edição\r\n          ) : (\r\n            <Edit2 size={18} strokeWidth={2} /> // Ícone de edição no modo de visualização\r\n          )}\r\n        </button>\r\n\r\n        {/* Botão para excluir a tarefa */}\r\n        <button className=\"icon-button\" onClick={() => deleteTask(task.id)}>\r\n          <Trash2 size={18} strokeWidth={2} /> {/* Ícone de lixeira */}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}