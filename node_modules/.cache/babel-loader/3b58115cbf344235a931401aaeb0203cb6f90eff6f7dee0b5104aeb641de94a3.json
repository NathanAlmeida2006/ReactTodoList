{"ast":null,"code":"var _jsxFileName = \"/home/poetaalucard/Documentos/Projetos/Front/Atividade/ReactAtividade/src/components/TaskList.jsx\",\n  _s = $RefreshSig$();\nimport { useTasks } from \"../context/TaskContext\";\nimport TaskItem from \"./TaskItem\";\nimport \"../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TaskList() {\n  _s();\n  // Extrai tasks, filter  e setFilter do contexto\n  const {\n    tasks,\n    filter,\n    setFilter\n  } = useTasks();\n\n  // Filtra as tarefas com base no filtro selecionado\n  const filteredTasks = tasks.filter(task => {\n    if (filter === \"completed\") return task.completed; // Mostra apenas tarefas concluídas\n    if (filter === \"active\") return !task.completed; // Mostra apenas tarefas pendentes\n    return true; // Mostra todas as tarefas\n  });\n\n  // Retorna o JSX da lista de tarefas\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `filter-button ${filter === \"all\" ? \"active\" : \"\"}` // Adiciona classe 'active' se o filtro for 'all'\n        ,\n        onClick: () => setFilter(\"all\") // Define o filtro como 'all' ao clicar\n        ,\n        children: \"Todas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `filter-button ${filter === \"active\" ? \"active\" : \"\"}` // Adiciona classe 'active' se o filtro for 'active'\n        ,\n        onClick: () => setFilter(\"active\") // Define o filtro como 'active' ao clicar\n        ,\n        children: \"Pendentes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `filter-button ${filter === \"completed\" ? \"active\" : \"\"}` // Adiciona classe 'active' se o filtro for 'completed'\n        ,\n        onClick: () => setFilter(\"completed\") // Define o filtro como 'completed' ao clicar\n        ,\n        children: \"Conclu\\xEDdas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-list\",\n      children: filteredTasks.map(task => /*#__PURE__*/_jsxDEV(TaskItem, {\n        task: task\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this) // Passa a tarefa como prop para TaskItem\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskList, \"qphoBDLc9W/tHMn+k/eRbvATcqI=\", false, function () {\n  return [useTasks];\n});\n_c = TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["useTasks","TaskItem","jsxDEV","_jsxDEV","TaskList","_s","tasks","filter","setFilter","filteredTasks","task","completed","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","id","_c","$RefreshReg$"],"sources":["/home/poetaalucard/Documentos/Projetos/Front/Atividade/ReactAtividade/src/components/TaskList.jsx"],"sourcesContent":["import { useTasks } from \"../context/TaskContext\";\r\nimport TaskItem from \"./TaskItem\";\r\nimport \"../App.css\";\r\n\r\nexport default function TaskList() {\r\n  // Extrai tasks, filter  e setFilter do contexto\r\n  const { tasks, filter, setFilter } = useTasks();\r\n\r\n  // Filtra as tarefas com base no filtro selecionado\r\n  const filteredTasks = tasks.filter((task) => {\r\n    if (filter === \"completed\") return task.completed; // Mostra apenas tarefas concluídas\r\n    if (filter === \"active\") return !task.completed; // Mostra apenas tarefas pendentes\r\n    return true; // Mostra todas as tarefas\r\n  });\r\n\r\n  // Retorna o JSX da lista de tarefas\r\n  return (\r\n    <div className=\"container\">\r\n      {/* Container para os botões de filtro */}\r\n      <div className=\"filters\">\r\n        {/* Botão para mostrar todas as tarefas */}\r\n        <button\r\n          className={`filter-button ${filter === \"all\" ? \"active\" : \"\"}`} // Adiciona classe 'active' se o filtro for 'all'\r\n          onClick={() => setFilter(\"all\")} // Define o filtro como 'all' ao clicar\r\n        >\r\n          Todas\r\n        </button>\r\n\r\n        {/* Botão para mostrar apenas tarefas pendentes */}\r\n        <button\r\n          className={`filter-button ${filter === \"active\" ? \"active\" : \"\"}`} // Adiciona classe 'active' se o filtro for 'active'\r\n          onClick={() => setFilter(\"active\")} // Define o filtro como 'active' ao clicar\r\n        >\r\n          Pendentes\r\n        </button>\r\n\r\n        {/* Botão para mostrar apenas tarefas concluídas */}\r\n        <button\r\n          className={`filter-button ${filter === \"completed\" ? \"active\" : \"\"}`} // Adiciona classe 'active' se o filtro for 'completed'\r\n          onClick={() => setFilter(\"completed\")} // Define o filtro como 'completed' ao clicar\r\n        >\r\n          Concluídas\r\n        </button>\r\n      </div>\r\n\r\n      {/* Container para a lista de tarefas filtradas */}\r\n      <div className=\"task-list\">\r\n        {/* Mapeia as tarefas filtradas e renderiza cada uma usando o componente TaskItem */}\r\n        {filteredTasks.map((task) => (\r\n          <TaskItem key={task.id} task={task} /> // Passa a tarefa como prop para TaskItem\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,wBAAwB;AACjD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACjC;EACA,MAAM;IAAEC,KAAK;IAAEC,MAAM;IAAEC;EAAU,CAAC,GAAGR,QAAQ,CAAC,CAAC;;EAE/C;EACA,MAAMS,aAAa,GAAGH,KAAK,CAACC,MAAM,CAAEG,IAAI,IAAK;IAC3C,IAAIH,MAAM,KAAK,WAAW,EAAE,OAAOG,IAAI,CAACC,SAAS,CAAC,CAAC;IACnD,IAAIJ,MAAM,KAAK,QAAQ,EAAE,OAAO,CAACG,IAAI,CAACC,SAAS,CAAC,CAAC;IACjD,OAAO,IAAI,CAAC,CAAC;EACf,CAAC,CAAC;;EAEF;EACA,oBACER,OAAA;IAAKS,SAAS,EAAC,WAAW;IAAAC,QAAA,gBAExBV,OAAA;MAAKS,SAAS,EAAC,SAAS;MAAAC,QAAA,gBAEtBV,OAAA;QACES,SAAS,EAAE,iBAAiBL,MAAM,KAAK,KAAK,GAAG,QAAQ,GAAG,EAAE,EAAG,CAAC;QAAA;QAChEO,OAAO,EAAEA,CAAA,KAAMN,SAAS,CAAC,KAAK,CAAE,CAAC;QAAA;QAAAK,QAAA,EAClC;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAGTf,OAAA;QACES,SAAS,EAAE,iBAAiBL,MAAM,KAAK,QAAQ,GAAG,QAAQ,GAAG,EAAE,EAAG,CAAC;QAAA;QACnEO,OAAO,EAAEA,CAAA,KAAMN,SAAS,CAAC,QAAQ,CAAE,CAAC;QAAA;QAAAK,QAAA,EACrC;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAGTf,OAAA;QACES,SAAS,EAAE,iBAAiBL,MAAM,KAAK,WAAW,GAAG,QAAQ,GAAG,EAAE,EAAG,CAAC;QAAA;QACtEO,OAAO,EAAEA,CAAA,KAAMN,SAAS,CAAC,WAAW,CAAE,CAAC;QAAA;QAAAK,QAAA,EACxC;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAGNf,OAAA;MAAKS,SAAS,EAAC,WAAW;MAAAC,QAAA,EAEvBJ,aAAa,CAACU,GAAG,CAAET,IAAI,iBACtBP,OAAA,CAACF,QAAQ;QAAeS,IAAI,EAAEA;MAAK,GAApBA,IAAI,CAACU,EAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAe,CAAC,CAAC;MACxC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACb,EAAA,CAlDuBD,QAAQ;EAAA,QAEOJ,QAAQ;AAAA;AAAAqB,EAAA,GAFvBjB,QAAQ;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}